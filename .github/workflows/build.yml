name: Build

on:
  workflow_dispatch:
  push:
    branches: [master, experimental]

jobs:

  vs2013_xp:
    name: Build VS 2013, Windows XP, ${{ matrix.build_type }}
    runs-on: [self-hosted, windows]
    strategy:
      matrix:
        build_type: [Release, RelWithDebInfo]

    steps:
    - uses: actions/checkout@v2

    - name: Create Build Environment
      run:  cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      shell: powershell
      working-directory: ${{runner.workspace}}/build
      run: cmake $env:GITHUB_WORKSPACE -A Win32 -T v120_xp -DBuildPortableVersion=ON

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: powershell
      run: cmake --build . --config ${{ matrix.build_type }}
      
    - name: Set LAA
      working-directory: "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\bin" 
      shell: powershell
      run: ./editbin.exe /largeaddressaware ${{runner.workspace}}/build/${{ matrix.build_type }}/mbii.x86.exe

    - name: Upload Build
      uses: actions/upload-artifact@v4
      with:
        name: Windows Build ${{ matrix.build_type }}
        path: |
            ${{runner.workspace}}/build/${{ matrix.build_type }}
            !${{runner.workspace}}/build/${{ matrix.build_type }}/compact_glsl.exe
        
  win_cleanup:
    name: Cleanup Windows Builds
    runs-on: [self-hosted, windows]
    needs: vs2013_xp
    steps:
      - name: Move Build Folder
        run: | 
          cmake -E remove_directory ${{runner.workspace}}/lastbuild
          cmake -E rename ${{runner.workspace}}/build ${{runner.workspace}}/lastbuild

  linux:
    name: Build Linux Client, ${{ matrix.build_type }}
    runs-on: ubuntu-latest
    container:
      image: ubuntu:20.04
      env:
        DEBIAN_FRONTEND: noninteractive
        TZ: Etc/Utc
      volumes:
        - ${{ github.workspace }}:/data
    strategy:
      matrix:
        build_type: [Release]

    steps:
    - uses: actions/checkout@v2

    - name: Create Build Environment
      run: |
        dpkg --add-architecture i386
        apt-get update
        apt-get install -y build-essential cmake gcc-multilib g++-multilib libjpeg-dev:i386 libpng-dev:i386 zlib1g-dev:i386 libsdl2-dev:i386
        cmake -E make_directory /data/build
        
    - name: Configure CMake
      shell: bash
      working-directory: /data/build
      run: >
        cmake .. -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_TOOLCHAIN_FILE=cmake/Toolchains/linux-i686.cmake
        -DBuildMPDed=OFF -DBuildMPEngine=ON -DBuildMPRdVanilla=ON -DBuildMPCGame=OFF
        -DBuildMPUI=OFF -DBuildSPEngine=OFF -DBuildSPGame=OFF -DBuildSPRdVanilla=OFF
        -DUseInternalPNG=ON -DUseInternalJPEG=ON -DBuildMPRdVulkan=ON -DBuildMPRend2=ON

    - name: Build
      working-directory: /data/build
      shell: bash
      run: |
        cmake --build .
        mv codemp/rd-vanilla/rd-vanilla-mbii_i386.so .
        mv codemp/rd-vulkan/rd-vulkan-mbii_i386.so .
        mv codemp/rd-rend2/rd-rend2-mbii_i386.so .
      
    - name: Upload Build
      uses: actions/upload-artifact@v4
      with:
        name: Linux Client Build ${{ matrix.build_type }}
        path: |
          /data/build/*.i386
          /data/build/*.so

  linux-old:
    name: Build Linux Server, ${{ matrix.build_type }}
    runs-on:  [self-hosted, linux]
    strategy:
      matrix:
        build_type: [Release]

    steps:
    - uses: actions/checkout@v2

    - name: Create Build Environment
      run: cmake -E make_directory ${{runner.workspace}}/build
      
    - name: Configure CMake
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: >
        cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_TOOLCHAIN_FILE=cmake/Toolchains/linux-i686.cmake
        -DBuildMPDed=ON -DBuildMPEngine=OFF -DBuildMPRdVanilla=OFF -DBuildMPCGame=OFF
        -DBuildMPUI=OFF -DBuildSPEngine=OFF -DBuildSPGame=OFF -DBuildSPRdVanilla=OFF
        -DBuildMPRdVulkan=OFF -DBuildMPRend2=OFF

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cmake --build .
      
    - name: Upload Build
      uses: actions/upload-artifact@v4
      with:
        name: Linux Server Build ${{ matrix.build_type }}
        path: ${{runner.workspace}}/build/*.i386
        
        
